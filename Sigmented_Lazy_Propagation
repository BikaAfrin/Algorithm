#include <bits/stdc++.h>
using namespace std;
#define optimize() ios_base::sync_with_stdio(false); cin.tie(nullptr);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(6); cout.setf(ios::fixed,ios::floatfield);
#define int long long
const int MAX=3e5+9;
int arr[MAX];
int ar[MAX];
int sum[MAX];

const double eps=10e-12;
struct info {
    int prop, sum;
} tree[MAX * 4];
void init(int node, int b, int e)
{
    if (b == e) {
        //cout<<"b - "<<b<<" e - "<<e<<"\n";
        tree[node].sum = arr[b];
        //cout<<" tree[node].sum - "<<tree[node].sum<<"\n";
        return;
    }
    int Left = node * 2;
    //cout<<"Left - "<<Left<<" ";
    int Right = node * 2 + 1;
    //cout<<"Right - "<<Right<<" ";
    int mid = (b + e) / 2;
    //cout<<"mid - "<<mid<<"\n";
    init(Left, b, mid);
    //cout<<"L - "<<Left<<" b - "<<b<<" mid - "<<mid<<"\n";
    init(Right, mid + 1, e);
    //cout<<"R - "<<Right<<" mid+1 - "<<mid+1<<" e - "<<e<<"\n";
    tree[node].sum = tree[Left].sum + tree[Right].sum;
    //cout<<"node - "<<node<<" tree[node].sum1111 - "<<tree[node].sum<<"\n";
}
void update(int node, int b, int e, int i, int j, int x)
{
    if (i > e || j < b)
        return;
    if (b >= i && e <= j)
    {
        tree[node].sum += ((e - b + 1) * x);
        tree[node].prop += x;
        return;
    }
    int Left = node * 2;
    int Right = (node * 2) + 1;
    int mid = (b + e) / 2;
    update(Left, b, mid, i, j, x);
    update(Right, mid + 1, e, i, j, x);
    tree[node].sum = tree[Left].sum + tree[Right].sum + (e - b + 1) * tree[node].prop;
}
int query(int node, int b, int e, int i, int j, int carry = 0)
{
    if (i > e || j < b)
        return 0;
    if (b >= i and e <= j)
        return tree[node].sum + carry * (e - b + 1);
    int Left = node << 1;
    int Right = (node << 1) + 1;
    int mid = (b + e) >> 1;
    int p1 = query(Left, b, mid, i, j, carry + tree[node].prop);
    int p2 = query(Right, mid + 1, e, i, j, carry + tree[node].prop);
    return p1 + p2;
}
int32_t main() {
    optimize();
    int n;
    cin >> n;
    for (int i = 1; i <= n; ++i) {
        cin >> arr[i];
    }
    init(1, 1, 7);
    update(1, 1, 7, 1, 7, 2);
    update(1, 1, 7, 1, 4, 3);
    cout << "Value for range [1, 4]: " <<  query(1, 1, 7, 1, 4) << "\n\n";
    cout << "State of Segment Tree:\n";
    for (int i = 1; i <= 13 ; ++i) {
        cout << "index: " << i << " sum: " << tree[i].sum << " prop: " << tree[i].prop << "\n";
    }
}
